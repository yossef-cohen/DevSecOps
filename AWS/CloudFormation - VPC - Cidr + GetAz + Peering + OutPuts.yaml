AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Vpc1Name:
    Type: String
    Description: Provide the name for the first VPC
    Default: VPC1

  Vpc1CIDR: 
    Type: String
    Description: Provide the CIDR for the first VPC
    Default: 10.0.0.0/16

  Vpc2Name:
    Type: String
    Description: Provide the name for the second VPC
    Default: VPC2

  Vpc2CIDR: 
    Type: String
    Description: Provide the CIDR for the second VPC
    Default: 20.0.0.0/16

Resources:

  ### VPC 1 START ###

  VPC1:
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: !Ref Vpc1CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - Key: Name
          Value: !Ref Vpc1Name

  InternetGateway1:
    Type: "AWS::EC2::InternetGateway"
    Properties: 
      Tags: 
        - Key: Name
          Value: "MyInternetGateway1"

  AttachGateway1:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1

  PublicSubnet1A:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC1
      MapPublicIpOnLaunch: true
      CidrBlock: !Select [1, !Cidr [!Ref Vpc1CIDR, 8, 8]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Vpc1Name, "PublicSubnet1", !Select [0, !GetAZs ""], !Select [1, !Cidr [!Ref Vpc1CIDR, 8, 8]]]]

  PublicSubnet1B:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC1
      MapPublicIpOnLaunch: true
      CidrBlock: !Select [2, !Cidr [!Ref Vpc1CIDR, 8, 8]]
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Vpc1Name, "PublicSubnet2", !Select [1, !GetAZs ""], !Select [2, !Cidr [!Ref Vpc1CIDR, 8, 8]]]]

  PrivateSubnet1A:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC1
      CidrBlock: !Select [3, !Cidr [!Ref Vpc1CIDR, 8, 8]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Vpc1Name, "PrivateSubnet1", !Select [0, !GetAZs ""], !Select [3, !Cidr [!Ref Vpc1CIDR, 8, 8]]]]

  PrivateSubnet1B:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC1
      CidrBlock: !Select [4, !Cidr [!Ref Vpc1CIDR, 8, 8]]
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Vpc1Name, "PrivateSubnet2", !Select [1, !GetAZs ""], !Select [4, !Cidr [!Ref Vpc1CIDR, 8, 8]]]]

  PublicRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref VPC1
      Tags: 
        - Key: Name
          Value: !Sub ${Vpc1Name}-PublicRouteTable

  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref VPC1
      Tags: 
        - Key: Name
          Value: !Sub ${Vpc1Name}-PrivateRouteTable

  PublicRoute1:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway1
    Properties: 
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway1

  PublicSubnet1AAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref PublicSubnet1A
      RouteTableId: !Ref PublicRouteTable1

  PublicSubnet1BAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref PublicSubnet1B
      RouteTableId: !Ref PublicRouteTable1

  PrivateSubnet1AAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref PrivateSubnet1A
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet1BAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref PrivateSubnet1B
      RouteTableId: !Ref PrivateRouteTable1

  PublicSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: 'Allow All'
      GroupName: AllowAll1
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name}-AllowAll-SG

  PublicNACL1:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name}-PublicNACL

  InboundRuleAll1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL1
      RuleNumber: 100
      Protocol: -1
      Egress: false
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'

  OutboundRuleAll1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL1
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'

  NACLAssociation1A:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNACL1
      SubnetId: !Ref PublicSubnet1A

  NACLAssociation1B:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNACL1
      SubnetId: !Ref PublicSubnet1B

  NACLAssociation1C:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNACL1
      SubnetId: !Ref PrivateSubnet1A

  NACLAssociation1D:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNACL1
      SubnetId: !Ref PrivateSubnet1B

  ### VPC 1 END ###

  ### VPC 2 START ###

  VPC2:
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: !Ref Vpc2CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - Key: Name
          Value: !Ref Vpc2Name

  InternetGateway2:
    Type: "AWS::EC2::InternetGateway"
    Properties: 
      Tags: 
        - Key: Name
          Value: "MyInternetGateway2"

  AttachGateway2:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      VpcId: !Ref VPC2
      InternetGatewayId: !Ref InternetGateway2

  PublicSubnet2A:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC2
      MapPublicIpOnLaunch: true
      CidrBlock: !Select [1, !Cidr [!Ref Vpc2CIDR, 8, 8]]
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Vpc2Name, "PublicSubnet", !Select [2, !GetAZs ""], !Select [1, !Cidr [!Ref Vpc2CIDR, 8, 8]]]]

  PrivateSubnet2A:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC2
      CidrBlock: !Select [2, !Cidr [!Ref Vpc2CIDR, 8, 8]]
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Vpc2Name, "PrivateSubnet", !Select [2, !GetAZs ""], !Select [2, !Cidr [!Ref Vpc2CIDR, 8, 8]]]]

  PublicRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref VPC2
      Tags: 
        - Key: Name
          Value: !Sub ${Vpc2Name}-PublicRouteTable

  PrivateRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref VPC2
      Tags: 
        - Key: Name
          Value: !Sub ${Vpc2Name}-PrivateRouteTable

  PublicRoute2:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway2
    Properties: 
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway2

  PublicSubnet2AAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref PublicSubnet2A
      RouteTableId: !Ref PublicRouteTable2

  PrivateSubnet2AAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref PrivateSubnet2A
      RouteTableId: !Ref PrivateRouteTable2

  PublicSecurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC2
      GroupDescription: 'Allow All'
      GroupName: AllowAll2
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${Vpc2Name}-AllowAll-SG

  PublicNACL2:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: !Sub ${Vpc2Name}-PublicNACL

  InboundRuleAll2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL2
      RuleNumber: 100
      Protocol: -1
      Egress: false
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'

  OutboundRuleAll2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL2
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'

  NACLAssociation2A:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNACL2
      SubnetId: !Ref PublicSubnet2A

  NACLAssociation2B:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNACL2
      SubnetId: !Ref PrivateSubnet2A

   ### VPC 2 END ###

   ### VPC PEERING CONNECTION START ###

   ### SAME ACCOUNT AND SAME REGION VPC PEERING CONNECTION ###

  # Create VPC Peering Connection
  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref VPC1
      PeerVpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name}-${Vpc2Name}-Peering

  # Routes from VPC1 to VPC2
  PublicRouteVPC1ToVPC2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: !Ref Vpc2CIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PrivateRouteVPC1ToVPC2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: !Ref Vpc2CIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  # Routes from VPC2 to VPC1
  PublicRouteVPC2ToVPC1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: !Ref Vpc1CIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PrivateRouteVPC2ToVPC1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: !Ref Vpc1CIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  ### VPC PEERING CONNECTION END ###

Outputs:

  ### VPC OUTPUTS ###

  VPC1Id:
    Description: "ID of VPC1"
    Value: !Ref VPC1
    Export:
      Name: !Sub "${AWS::StackName}-VPC1Id"

  VPC2Id:
    Description: "ID of VPC2"
    Value: !Ref VPC2
    Export:
      Name: !Sub "${AWS::StackName}-VPC2Id"

  ### PEERING OUTPUTS ###

  VPCPeeringConnectionId:
    Description: "ID of the VPC Peering Connection"
    Value: !Ref VPCPeeringConnection
    Export:
      Name: !Sub "${AWS::StackName}-VPCPeeringConnectionId"

  ### EC2-RELATED OUTPUTS START ###

  # VPC1 Subnet Outputs

  PublicSubnet1AId:
    Description: "ID of Public Subnet 1A in VPC1"
    Value: !Ref PublicSubnet1A
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1AId"

  PublicSubnet1BId:
    Description: "ID of Public Subnet 1B in VPC1"
    Value: !Ref PublicSubnet1B
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1BId"

  PrivateSubnet1AId:
    Description: "ID of Private Subnet 1A in VPC1"
    Value: !Ref PrivateSubnet1A
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1AId"

  PrivateSubnet1BId:
    Description: "ID of Private Subnet 1B in VPC1"
    Value: !Ref PrivateSubnet1B
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1BId"

  # VPC2 Subnet Outputs

  PublicSubnet2AId:
    Description: "ID of Public Subnet 2A in VPC2"
    Value: !Ref PublicSubnet2A
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2AId"

  PrivateSubnet2AId:
    Description: "ID of Private Subnet 2A in VPC2"
    Value: !Ref PrivateSubnet2A
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2AId"

  # Security Group Outputs

  SecurityGroup1Id:
    Description: "ID of Security Group in VPC1"
    Value: !Ref PublicSecurityGroup1
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup1Id"

  SecurityGroup2Id:
    Description: "ID of Security Group in VPC2"
    Value: !Ref PublicSecurityGroup2
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup2Id"
  
  # Route Table Outputs

  PublicRouteTable1Id:
    Description: "ID of Public Route Table in VPC1"
    Value: !Ref PublicRouteTable1
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTable1Id"

  PrivateRouteTable1Id:
    Description: "ID of Private Route Table in VPC1"
    Value: !Ref PrivateRouteTable1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateRouteTable1Id"

  PublicRouteTable2Id:
    Description: "ID of Public Route Table in VPC2"
    Value: !Ref PublicRouteTable2
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTable2Id"

  PrivateRouteTable2Id:
    Description: "ID of Private Route Table in VPC2"
    Value: !Ref PrivateRouteTable2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateRouteTable2Id"

  ### EC2-RELATED OUTPUTS END ###
