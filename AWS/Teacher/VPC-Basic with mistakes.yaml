AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simple VPC with Public and Private Subnets'

Parameters:
  VPC1CIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: "Enter the CIDR block for VPC 1"

  VPC2CIDR:
    Type: String
    Default: 172.16.0.0/16
    Description: "Enter the CIDR block for VPC 2"
  
  SubnetCount1:
    Type: Number
    Default: 2
    Description: "How many subnets to create"

  SubnetCount2:
    Type: Number
    Default: 4
    MinValue: 4
    MaxValue: 4
    Description: "Number of subnets to create in VPC2 (must be 4)"

  SubnetMaskBits:
    Type: Number
    Default: 8
    Description: "Mask increase (e.g., 8 turns /16 into /24)"

Resources:
  # VPC
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC1CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Simple-VPC-1

  # Internet Gateway
  InternetGateway1:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Simple-IGW-1

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1

  # Public Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [0, !Cidr [!Ref VPC1CIDR, !Ref SubnetCount1, !Ref SubnetMaskBits ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Simple-PublicSubnet-1

  # Private Subnet
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [1, !Cidr [!Ref VPC1CIDR, !Ref SubnetCount1, !Ref SubnetMaskBits ]]
      Tags:
        - Key: Name
          Value: Simple-PrivateSubnet-1

  # Public Route Table
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: Simple-PublicRT-1

  # Private Route Table
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: Simple-PrivateRT-1

  # Public Route to Internet Gateway
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment1
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1

  # Associate Public Subnet with Public Route Table
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1

  # Associate Private Subnet with Private Route Table
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

#############################
# VPC 2 Resources
#############################

  # VPC
  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC2CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Simple-VPC-2

  # Internet Gateway
  InternetGateway2:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Simple-IGW-2

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC2
      InternetGatewayId: !Ref InternetGateway2

  # Public Subnet
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [0, !Cidr [!Ref VPC2CIDR, !Ref SubnetCount2, !Ref SubnetMaskBits ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Simple-PublicSubnet-2

  # Private Subnet
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [1, !Cidr [!Ref VPC2CIDR, !Ref SubnetCount2, !Ref SubnetMaskBits ]]
      Tags:
        - Key: Name
          Value: Simple-PrivateSubnet-2

  # Public Subnet
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [2, !Cidr [!Ref VPC2CIDR, !Ref SubnetCount2, !Ref SubnetMaskBits ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Simple-PublicSubnet-3

  # Private Subnet
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [3, !Cidr [!Ref VPC2CIDR, !Ref SubnetCount2, !Ref SubnetMaskBits ]]
      Tags:
        - Key: Name
          Value: Simple-PrivateSubnet-3

  # Public Route Table
  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: Simple-PublicRT-2

  # Private Route Table
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: Simple-PrivateRT-2

  # Public Route to Internet Gateway
  PublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment2
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway2

  # Associate Public Subnet with Public Route Table
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2
  
  # Associate Public Subnet with Public Route Table
  PublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable2

  # Associate Private Subnet with Private Route Table
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Associate Private Subnet with Private Route Table
  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable2

#############################
# VPC Peering Connection
#############################

  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref VPC1
      PeerVpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: VPC1-VPC2-Peering
  
  # Peering Public Route 
  PeeringPublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 40.0.0.0/16
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
    
  # Peering Public Route 
  PeeringPublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 30.0.0.0/16
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  # Peering Public Route 
  PeeringPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 40.0.0.0/16
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
    
  # Peering Public Route 
  PeeringPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 30.0.0.0/16
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

#############################
# Security Groups and NACLs
#############################

  # Security Group for VPC 1
  VPC1SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0


  VPC1NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-NACL

  VPC1NetworkAclInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      NetworkAclId: !Ref VPC1NetworkAcl
      RuleAction: allow
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      CidrBlock: 0.0.0.0/0

  VPC1NetworkAclOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      NetworkAclId: !Ref VPC1NetworkAcl
      RuleAction: allow
      Protocol: -1
      RuleNumber: 100

  VPC1PublicSubnetNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref VPC1NetworkAcl
  
  VPC1PrivateSubnetNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref VPC1NetworkAcl

  ############################

  # Security Group for VPC 1
  VPC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  VPC2NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: VPC2-NACL
  
  VPC2NetworkAclInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      NetworkAclId: !Ref VPC2NetworkAcl
      RuleAction: allow
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      CidrBlock: 0.0.0.0/0

  VPC2NetworkAclOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      NetworkAclId: !Ref VPC2NetworkAcl
      RuleAction: allow
      Protocol: -1
      RuleNumber: 100
    
  VPC2PublicSubnetNaclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref VPC2NetworkAcl
  
  VPC2PublicSubnetNaclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref VPC2NetworkAcl
  
  VPC2PrivateSubnetNaclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref VPC2NetworkAcl
  
  VPC2PrivateSubnetNaclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref VPC2NetworkAcl

#############################
# Outputs
#############################

Outputs:
  VPCId1:
    Description: VPC1 ID
    Value: !Ref VPC1
    
  PublicSubnet1:
    Description: VPC1 Public Subnet ID
    Value: !Ref PublicSubnet1

  PrivateSubnet1:
    Description: VPC1 Private Subnet ID
    Value: !Ref PrivateSubnet1

  VPCId2:
    Description: VPC2 ID
    Value: !Ref VPC2

  PublicSubnet2:
    Description: VPC2 Public Subnet ID
    Value: !Ref PublicSubnet2

  PrivateSubnet2:
    Description: VPC2 Private Subnet ID
    Value: !Ref PrivateSubnet2

  PublicSubnet3:
    Description: VPC2 Public Subnet ID
    Value: !Ref PublicSubnet3

  PrivateSubnet3:
    Description: VPC2 Private Subnet ID
    Value: !Ref PrivateSubnet3
