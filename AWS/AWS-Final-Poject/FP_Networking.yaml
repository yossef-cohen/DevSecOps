AWSTemplateFormatVersion: '2010-09-09'
Description: 'Two VPCs, each with one public and one private subnet'

Parameters:
  VPC1CIDR:
    Type: String
    Default: "30.0.0.0/16"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Description: "Enter the CIDR block for VPC1"
    ConstraintDescription: "Must be a valid CIDR range of the form x.x.x.x/nn"

  VPC2CIDR:
    Type: String
    Default: "40.0.0.0/16"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Description: "Enter the CIDR block for VPC2"
    ConstraintDescription: "Must be a valid CIDR range of the form x.x.x.x/nn"

  SubnetBitsVPC1:
    Type: Number
    Default: 8
    MinValue: 4
    MaxValue: 12
    Description: >
      Number of additional bits for subnet mask.
      Example: /16 + 8 = /24 subnets

  SubnetBitsVPC2:
    Type: Number
    Default: 8
    MinValue: 4
    MaxValue: 12
    Description: >
      Number of additional bits for subnet mask.
      Example: /16 + 8 = /24 subnets

  AllowedProtocol:
    Type: String
    Default: -1
    AllowedValues: ["-1", "6", "17"] # -1=all, 6=TCP, 17=UDP
    Description: "Select protocol for Security Group rules (-1=all, 6=TCP, 17=UDP)"

  AllowPort:
    Type: Number
    Default: 0
    MinValue: 0
    MaxValue: 65535
    Description: "Enter port number to allow (0 = all ports)"

Resources:

##################
#      VPC1      #
##################

  # VPC1
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC1CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: prod-app

  # Internet Gateway for VPC1
  InternetGateway1:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: prod-app-igw

  # Attach IGW to VPC1
  InternetGatewayAttachment1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1

  # Subnets for VPC1
  PublicSubnetVPC1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [0, !Cidr [!Ref VPC1CIDR, 4, !Ref SubnetBitsVPC1]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: VPC1-PublicSubnet1

  PrivateSubnetVPC1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [!Ref VPC1CIDR, 4, !Ref SubnetBitsVPC1]]
      Tags:
        - Key: Name
          Value: VPC1-PrivateSubnet1

  # Route Table for VPC1
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-PublicRT

  # Internet Route for VPC1
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment1
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1

      # Route Table for VPC2
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-PrivateRT

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [NATGatewayEIP, AllocationId]
      SubnetId: !Ref PublicSubnetVPC1
      Tags:
        - Key: Name
          Value: prod-app-nat

  NATGatewayEIP:
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc

  RouteNATGateway:
   Type: AWS::EC2::Route
   Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway


  
  # Route Table Association for Public Subnet in VPC1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetVPC1
      RouteTableId: !Ref PublicRouteTable1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetVPC1
      RouteTableId: !Ref PrivateRouteTable1

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC1
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable1
        - !Ref PrivateRouteTable1
      Tags:
        - Key: Name
          Value: prod-app-s3-endpoint

  DynamoDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC1
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable1
        - !Ref PrivateRouteTable1
      Tags:
        - Key: Name
          Value: prod-app-dynamodb-endpoint

##################
#      VPC2      #
##################
  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC2CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: prod-data

  # Subnet for VPC2
  PrivateSubnetVPC2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [!Ref VPC2CIDR, 2, !Ref SubnetBitsVPC2]]
      Tags:
        - Key: Name
          Value: VPC2-PrivateSubnet1

  # Route Table for VPC2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: VPC2-PrivateRT

###################
# Security Groups #
###################

  # Security Group for Lambda functions
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Lambda functions
      VpcId: !Ref VPC1
      SecurityGroupEgress:
        - IpProtocol: !Ref AllowedProtocol
          FromPort: !Ref AllowPort
          ToPort: !Ref AllowPort
          CidrIp: 0.0.0.0/0
  
  # Security Group for EC2 instances
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2 instances
      VpcId: !Ref VPC1
      SecurityGroupEgress:
        - IpProtocol: !Ref AllowedProtocol
          FromPort: !Ref AllowPort
          ToPort: !Ref AllowPort
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: "6" # TCP for SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  
  # Security Group for API Gateway 
  APIGatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for API Gateway
      VpcId: !Ref VPC1
      SecurityGroupEgress:
        - IpProtocol: !Ref AllowedProtocol
          FromPort: !Ref AllowPort
          ToPort: !Ref AllowPort
          CidrIp: 0.0.0.0/0

##################
#     Outputs    #
##################

Outputs:
  VPC1Id:
    Description: VPC1 ID
    Value: !Ref VPC1
    Export:
      Name: !Sub "${AWS::StackName}-VPC1Id"

  VPC2Id:
    Description: VPC2 ID
    Value: !Ref VPC2
    Export:
      Name: !Sub "${AWS::StackName}-VPC2Id"

  PublicSubnetIdVPC1:
    Description: Public Subnet in VPC1
    Value: !Ref PublicSubnetVPC1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetVPC1"

  PrivateSubnetIdVPC1:
    Description: Private Subnet in VPC1
    Value: !Ref PrivateSubnetVPC1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1VPC1"

  PrivateSubnetIdVPC2:
    Description: Private Subnet in VPC2
    Value: !Ref PrivateSubnetVPC2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1VPC2"

  NATGatewayId:
    Description: NAT Gateway in VPC1
    Value: !Ref NATGateway
    Export:
      Name: !Sub "${AWS::StackName}-NATGatewayId"

  PublicRouteTableIdVPC1:
    Description: Public Route Table for VPC1
    Value: !Ref PublicRouteTable1
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTableIdVPC1"

  PrivateRouteTableIdVPC1:
    Description: Private Route Table for VPC1
    Value: !Ref PrivateRouteTable1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateRouteTableIdVPC1"

  PrivateRouteTableIdVPC2:
    Description: Private Route Table for VPC2
    Value: !Ref PrivateRouteTable2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateRouteTableIdVPC2"

  LambdaSecurityGroupId:
    Description: Lambda Security Group ID
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-LambdaSecurityGroupId"

  EC2SecurityGroupId:
    Description: EC2 Security Group ID
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-EC2SecurityGroupId"

  APIGatewaySecurityGroupId:
    Description: API Gateway Security Group ID
    Value: !Ref APIGatewaySecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-APIGatewaySecurityGroupId"

  S3VPCEndpointId:
    Description: S3 VPC Endpoint ID
    Value: !Ref S3VPCEndpoint
    Export:
      Name: !Sub "${AWS::StackName}-S3VPCEndpointId"

  DynamoDBVPCEndpointId:
    Description: DynamoDB VPC Endpoint ID
    Value: !Ref DynamoDBVPCEndpoint
    Export:
      Name: !Sub "${AWS::StackName}-DynamoDBVPCEndpointId"


